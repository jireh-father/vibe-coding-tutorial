name: PR 자동 할당

on:
  pull_request:
    types: [opened, reopened]

jobs:
  auto-assign:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: PR 자동 할당
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            const author = context.payload.pull_request.user.login;
            
            // PR 작성자를 담당자로 자동 할당
            await github.rest.issues.addAssignees({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              assignees: [author]
            });
            
            // PR의 파일 목록 가져오기
            const response = await github.rest.pulls.listFiles({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });
            
            const files = response.data;
            
            // 코드 영역별 담당자
            const codeAreaOwners = {
              'frontend': ['frontend-reviewer'],
              'src/api': ['backend-reviewer'],
              'src/agent': ['ai-reviewer'],
              'tests': ['qa-reviewer']
            };
            
            // 변경된 파일의 영역에 따라 리뷰어 선택
            const reviewers = new Set();
            
            files.forEach(file => {
              for (const [area, owners] of Object.entries(codeAreaOwners)) {
                if (file.filename.startsWith(area)) {
                  owners.forEach(owner => reviewers.add(owner));
                  break;
                }
              }
            });
            
            // 작성자를 리뷰어 목록에서 제외
            reviewers.delete(author);
            
            // 리뷰어 할당 (리뷰어가 있는 경우에만)
            if (reviewers.size > 0) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner: repo.owner,
                  repo: repo.repo,
                  pull_number: prNumber,
                  reviewers: Array.from(reviewers)
                });
                
                console.log(`리뷰어 할당됨: ${Array.from(reviewers).join(', ')}`);
              } catch (error) {
                console.error('리뷰어 할당 중 오류 발생:', error);
              }
            }
            
            // PR에 코멘트 추가
            const comment = `### 🤖 자동 할당 알림
            
            @${author}님이 이 PR의 담당자로 자동 할당되었습니다.
            
            ${reviewers.size > 0 ? `다음 리뷰어가 자동으로 지정되었습니다: ${Array.from(reviewers).map(r => '@' + r).join(', ')}` : '자동 리뷰어 할당이 이루어지지 않았습니다. 수동으로 리뷰어를 지정해 주세요.'}
            
            > 리뷰어는 파일 변경 영역에 따라 자동으로 할당됩니다. 필요한 경우 리뷰어를 수정해 주세요.`;
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: comment
            }); 