name: PR 자동 코멘트

on:
  pull_request_target:
    types: [opened]

jobs:
  welcome:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: PR 리뷰 안내 코멘트
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const author = context.payload.pull_request.user.login;
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            const comment = `안녕하세요 @${author}님, PR을 제출해 주셔서 감사합니다! 🙌
            
            ### 리뷰 절차 안내
            1. 코드 리뷰는 24시간 이내에 진행될 예정입니다.
            2. 테스트 및 코드 품질 체크가 모두 통과되었는지 확인해 주세요.
            3. 리뷰어의 피드백을 받으면 필요한 수정을 진행해 주세요.
            
            ### 체크리스트
            - [ ] 모든 테스트 통과 (CI 결과 확인)
            - [ ] 코드 커버리지 80% 이상 (테스트 리포트 확인)
            - [ ] 코딩 컨벤션 준수 (lint 검사 통과)
            
            필요한 도움이 있으시면 언제든지 코멘트를 남겨주세요!`;
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: comment
            });

  check-tests:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: 테스트 파일 확인
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            // PR의 파일 목록 가져오기
            const response = await github.rest.pulls.listFiles({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });
            
            const files = response.data;
            const sourceFiles = files.filter(file => 
              (file.filename.startsWith('src/') || file.filename.startsWith('frontend/')) && 
              file.filename.endsWith('.py') && 
              !file.filename.includes('__init__.py')
            );
            
            const testFiles = files.filter(file => 
              file.filename.startsWith('tests/') && 
              file.filename.endsWith('.py')
            );
            
            // 소스 파일이 변경되었지만 테스트 파일이 없는 경우 코멘트
            if (sourceFiles.length > 0 && testFiles.length === 0) {
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: `### 테스트 코드 알림 ⚠️
                
                이 PR에서 소스 코드가 변경되었지만, 테스트 코드가 포함되지 않은 것 같습니다.
                
                #### 변경된 소스 파일:
                ${sourceFiles.map(file => `- \`${file.filename}\``).join('\n')}
                
                테스트 코드를 추가하면 코드 품질과 안정성을 보장하는 데 도움이 됩니다.
                가능하면 변경 사항에 대한 테스트 케이스를 추가해 주세요!`
              });
            }

  pr-size:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: PR 크기 체크
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            // PR의 파일 목록 가져오기
            const response = await github.rest.pulls.listFiles({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });
            
            const files = response.data;
            const changedLines = files.reduce((acc, file) => acc + file.additions + file.deletions, 0);
            
            let size = '';
            let emoji = '';
            
            if (changedLines < 50) {
              size = '매우 작음';
              emoji = '🟢';
            } else if (changedLines < 200) {
              size = '작음';
              emoji = '🟢';
            } else if (changedLines < 500) {
              size = '중간';
              emoji = '🟡';
            } else if (changedLines < 1000) {
              size = '큼';
              emoji = '🟠';
            } else {
              size = '매우 큼';
              emoji = '🔴';
            }
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: `### PR 크기 분석 ${emoji}
              
              이 PR의 크기는 **${size}** (${changedLines}줄 변경)입니다.
              
              ${changedLines > 500 ? '큰 PR은 리뷰하기 어려울 수 있습니다. 가능하면 작은 단위로 나누는 것이 좋습니다.' : '적절한 크기의 PR입니다. 리뷰가 수월하게 진행될 것입니다.'}`
            }); 