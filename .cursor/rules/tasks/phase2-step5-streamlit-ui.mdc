---
description:
globs:
alwaysApply: false
---
# 5단계: Streamlit 챗봇 UI 구현

## 🎯 목표
사용자 인터페이스 구축 - 전체 화면 채팅 인터페이스, 실시간 스트리밍 응답 처리, 상품 카드 표시

## 📋 상세 태스크

### 5.1 프로젝트 구조 확장

```
src/ui/
├── __init__.py
├── streamlit_app.py
├── components/
│   ├── __init__.py
│   ├── chat_interface.py
│   ├── product_card.py
│   ├── price_comparison.py
│   └── sidebar.py
├── styles/
│   ├── __init__.py
│   ├── main.css
│   └── components.css
├── utils/
│   ├── __init__.py
│   ├── api_client.py
│   └── session_manager.py
└── config/
    ├── __init__.py
    └── ui_config.py
```

### 5.2 메인 Streamlit 앱 구현

#### 메인 앱 (`src/ui/streamlit_app.py`)
```python
import streamlit as st
import asyncio
import uuid
from datetime import datetime
from typing import Dict, Any, List

from .components.chat_interface import ChatInterface
from .components.sidebar import Sidebar
from .utils.api_client import APIClient
from .utils.session_manager import SessionManager
from .config.ui_config import UIConfig

# 페이지 설정
st.set_page_config(
    page_title="🛒 PriceFinder Agent",
    page_icon="🛒",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS 스타일 로드
def load_css():
    """CSS 스타일 로드"""
    with open("src/ui/styles/main.css", "r", encoding="utf-8") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

class PriceFinderApp:
    """PriceFinder Streamlit 앱 메인 클래스"""
    
    def __init__(self):
        self.config = UIConfig()
        self.session_manager = SessionManager()
        self.api_client = APIClient()
        self.chat_interface = ChatInterface()
        self.sidebar = Sidebar()
        
        # 세션 상태 초기화
        self._initialize_session_state()
    
    def _initialize_session_state(self):
        """세션 상태 초기화"""
        if "session_id" not in st.session_state:
            st.session_state.session_id = str(uuid.uuid4())
        
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        if "search_history" not in st.session_state:
            st.session_state.search_history = []
        
        if "current_products" not in st.session_state:
            st.session_state.current_products = []
        
        if "is_processing" not in st.session_state:
            st.session_state.is_processing = False
    
    def run(self):
        """앱 실행"""
        # CSS 로드
        load_css()
        
        # 헤더 렌더링
        self._render_header()
        
        # 메인 컨테이너
        main_container = st.container()
        
        with main_container:
            # 채팅 인터페이스
            col1, col2 = st.columns([3, 1])
            
            with col1:
                self._render_chat_area()
            
            with col2:
                self._render_sidebar()
        
        # 입력 영역 (하단 고정)
        self._render_input_area()
    
    def _render_header(self):
        """헤더 렌더링"""
        st.markdown("""
        <div class="header-container">
            <div class="header-content">
                <h1>🛒 PriceFinder Agent</h1>
                <p>AI가 도와주는 스마트 최저가 쇼핑</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    def _render_chat_area(self):
        """채팅 영역 렌더링"""
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        
        # 환영 메시지 (첫 방문 시)
        if not st.session_state.messages:
            self._show_welcome_message()
        
        # 메시지 표시
        for message in st.session_state.messages:
            self.chat_interface.render_message(message)
        
        # 처리 중 표시
        if st.session_state.is_processing:
            self.chat_interface.render_processing_indicator()
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def _render_sidebar(self):
        """사이드바 렌더링"""
        self.sidebar.render(
            search_history=st.session_state.search_history,
            current_products=st.session_state.current_products
        )
    
    def _render_input_area(self):
        """입력 영역 렌더링"""
        st.markdown('<div class="input-container">', unsafe_allow_html=True)
        
        # 입력 컨테이너
        input_container = st.container()
        
        with input_container:
            col1, col2, col3 = st.columns([6, 1, 1])
            
            with col1:
                user_input = st.chat_input(
                    placeholder="상품을 검색해보세요... (예: 아이폰 15 최저가)",
                    disabled=st.session_state.is_processing
                )
            
            with col2:
                image_upload = st.file_uploader(
                    "📷",
                    type=['png', 'jpg', 'jpeg'],
                    help="상품 이미지 업로드",
                    label_visibility="collapsed"
                )
            
            with col3:
                if st.button("🔄", help="새로운 대화 시작"):
                    self._reset_conversation()
        
        # 사용자 입력 처리
        if user_input:
            self._handle_user_input(user_input)
        
        if image_upload:
            self._handle_image_upload(image_upload)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def _show_welcome_message(self):
        """환영 메시지 표시"""
        welcome_message = {
            "role": "assistant",
            "content": """
안녕하세요! 🛒 **PriceFinder Agent**입니다.

저는 여러 쇼핑몰에서 최저가를 찾아드리는 AI 어시스턴트예요.

### 🔍 이런 것들을 도와드릴 수 있어요:
- **상품 검색**: "아이폰 15 최저가 찾아줘"
- **가격 비교**: "삼성 갤럭시 S24 가격 비교해줘"  
- **이미지 검색**: 상품 사진을 업로드해서 검색
- **상세 정보**: 리뷰, 배송비, 할인 정보 등

### 💡 검색 팁:
- 브랜드명과 모델명을 함께 입력하면 더 정확해요
- "최저가", "가격 비교" 등의 키워드를 사용해보세요

궁금한 상품이 있으시면 언제든 말씀해 주세요! 😊
            """,
            "timestamp": datetime.now(),
            "type": "welcome"
        }
        
        self.chat_interface.render_message(welcome_message)
    
    def _handle_user_input(self, user_input: str):
        """사용자 입력 처리"""
        # 사용자 메시지 추가
        user_message = {
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now()
        }
        st.session_state.messages.append(user_message)
        
        # 검색 히스토리에 추가
        st.session_state.search_history.append({
            "query": user_input,
            "timestamp": datetime.now()
        })
        
        # API 호출 및 스트리밍 응답 처리
        self._process_user_message(user_input)
    
    def _handle_image_upload(self, image_file):
        """이미지 업로드 처리"""
        # 이미지 메시지 추가
        image_message = {
            "role": "user",
            "content": "이미지를 업로드했습니다.",
            "image": image_file,
            "timestamp": datetime.now()
        }
        st.session_state.messages.append(image_message)
        
        # 이미지 검색 처리
        self._process_image_search(image_file)
    
    def _process_user_message(self, message: str):
        """사용자 메시지 처리 및 API 호출"""
        st.session_state.is_processing = True
        
        try:
            # API 스트리밍 호출
            response_placeholder = st.empty()
            
            # 비동기 스트리밍 처리
            asyncio.run(self._stream_response(message, response_placeholder))
            
        except Exception as e:
            st.error(f"처리 중 오류가 발생했습니다: {str(e)}")
        
        finally:
            st.session_state.is_processing = False
    
    async def _stream_response(self, message: str, placeholder):
        """스트리밍 응답 처리"""
        assistant_message = {
            "role": "assistant",
            "content": "",
            "timestamp": datetime.now(),
            "products": [],
            "type": "response"
        }
        
        try:
            # API 클라이언트를 통한 스트리밍 호출
            async for chunk in self.api_client.stream_chat(
                message=message,
                session_id=st.session_state.session_id
            ):
                # 스트리밍 데이터 처리
                if chunk["type"] == "message":
                    assistant_message["content"] += chunk["data"].get("content", "")
                
                elif chunk["type"] == "products":
                    assistant_message["products"] = chunk["data"]
                    st.session_state.current_products = chunk["data"]
                
                elif chunk["type"] == "agent_result":
                    # Agent 결과 처리
                    result_data = chunk["data"]
                    if "search_results" in result_data:
                        assistant_message["products"] = result_data["search_results"]
                        st.session_state.current_products = result_data["search_results"]
                
                # 실시간 업데이트
                with placeholder.container():
                    self.chat_interface.render_message(assistant_message)
        
        except Exception as e:
            assistant_message["content"] = f"죄송합니다. 처리 중 오류가 발생했습니다: {str(e)}"
        
        # 최종 메시지 저장
        st.session_state.messages.append(assistant_message)
    
    async def _process_image_search(self, image_file):
        """이미지 검색 처리"""
        st.session_state.is_processing = True
        
        try:
            # 이미지 검색 API 호출 (7단계에서 구현)
            st.info("이미지 검색 기능은 7단계에서 구현됩니다.")
            
        except Exception as e:
            st.error(f"이미지 처리 중 오류가 발생했습니다: {str(e)}")
        
        finally:
            st.session_state.is_processing = False
    
    def _reset_conversation(self):
        """대화 초기화"""
        st.session_state.messages = []
        st.session_state.current_products = []
        st.session_state.session_id = str(uuid.uuid4())
        st.rerun()

# 앱 실행
if __name__ == "__main__":
    app = PriceFinderApp()
    app.run()
```

### 5.3 채팅 인터페이스 컴포넌트

#### 채팅 인터페이스 (`src/ui/components/chat_interface.py`)
```python
import streamlit as st
from datetime import datetime
from typing import Dict, Any, List
from .product_card import ProductCard
from .price_comparison import PriceComparison

class ChatInterface:
    """채팅 인터페이스 컴포넌트"""
    
    def __init__(self):
        self.product_card = ProductCard()
        self.price_comparison = PriceComparison()
    
    def render_message(self, message: Dict[str, Any]):
        """메시지 렌더링"""
        role = message.get("role", "user")
        content = message.get("content", "")
        timestamp = message.get("timestamp", datetime.now())
        message_type = message.get("type", "text")
        
        if role == "user":
            self._render_user_message(message)
        else:
            self._render_assistant_message(message)
    
    def _render_user_message(self, message: Dict[str, Any]):
        """사용자 메시지 렌더링"""
        with st.chat_message("user", avatar="👤"):
            content = message.get("content", "")
            
            # 이미지가 있는 경우
            if "image" in message:
                col1, col2 = st.columns([1, 3])
                with col1:
                    st.image(message["image"], width=100)
                with col2:
                    st.markdown(content)
            else:
                st.markdown(content)
            
            # 타임스탬프
            timestamp = message.get("timestamp", datetime.now())
            st.caption(f"🕐 {timestamp.strftime('%H:%M')}")
    
    def _render_assistant_message(self, message: Dict[str, Any]):
        """어시스턴트 메시지 렌더링"""
        with st.chat_message("assistant", avatar="🛒"):
            content = message.get("content", "")
            products = message.get("products", [])
            message_type = message.get("type", "response")
            
            # 메시지 내용
            if content:
                st.markdown(content)
            
            # 상품 정보가 있는 경우
            if products:
                self._render_products_section(products)
            
            # 타임스탬프
            timestamp = message.get("timestamp", datetime.now())
            st.caption(f"🕐 {timestamp.strftime('%H:%M')}")
    
    def _render_products_section(self, products: List[Dict[str, Any]]):
        """상품 섹션 렌더링"""
        if not products:
            return
        
        st.markdown("### 🔍 검색 결과")
        
        # 상품 카드들
        for i, product in enumerate(products[:5]):  # 최대 5개까지 표시
            self.product_card.render(product, index=i)
        
        # 더 많은 결과가 있는 경우
        if len(products) > 5:
            with st.expander(f"더 보기 ({len(products) - 5}개 추가 결과)"):
                for i, product in enumerate(products[5:], start=5):
                    self.product_card.render(product, index=i)
        
        # 가격 비교 테이블
        if len(products) > 1:
            st.markdown("### 📊 가격 비교")
            self.price_comparison.render(products)
    
    def render_processing_indicator(self):
        """처리 중 표시"""
        with st.chat_message("assistant", avatar="🛒"):
            with st.spinner("검색 중입니다..."):
                st.markdown("🔍 여러 쇼핑몰에서 최저가를 찾고 있어요...")
                
                # 진행 상황 표시
                progress_bar = st.progress(0)
                import time
                for i in range(100):
                    time.sleep(0.01)
                    progress_bar.progress(i + 1)
```

### 5.4 상품 카드 컴포넌트

#### 상품 카드 (`src/ui/components/product_card.py`)
```python
import streamlit as st
from typing import Dict, Any

class ProductCard:
    """상품 카드 컴포넌트"""
    
    def render(self, product: Dict[str, Any], index: int = 0):
        """상품 카드 렌더링"""
        name = product.get("name", "상품명 없음")
        price = product.get("price", 0)
        shop = product.get("shop", "쇼핑몰")
        url = product.get("url", "#")
        image_url = product.get("image_url", "")
        rating = product.get("rating", 0)
        review_count = product.get("review_count", 0)
        shipping_fee = product.get("shipping_fee", 0)
        discount_rate = product.get("discount_rate", 0)
        original_price = product.get("original_price", price)
        
        # 카드 컨테이너
        with st.container():
            st.markdown(f"""
            <div class="product-card" style="
                border: 1px solid #e0e0e0;
                border-radius: 10px;
                padding: 15px;
                margin: 10px 0;
                background: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            ">
            """, unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns([1, 3, 1])
            
            # 상품 이미지
            with col1:
                if image_url:
                    st.image(image_url, width=100)
                else:
                    st.markdown("""
                    <div style="
                        width: 100px;
                        height: 100px;
                        background: #f0f0f0;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        border-radius: 5px;
                    ">
                        📦
                    </div>
                    """, unsafe_allow_html=True)
            
            # 상품 정보
            with col2:
                # 상품명
                st.markdown(f"**{name}**")
                
                # 쇼핑몰
                st.markdown(f"🏪 {shop}")
                
                # 가격 정보
                price_html = f"""
                <div style="margin: 10px 0;">
                    <span style="font-size: 24px; font-weight: bold; color: #e74c3c;">
                        {price:,}원
                    </span>
                """
                
                if discount_rate > 0:
                    price_html += f"""
                    <span style="margin-left: 10px; text-decoration: line-through; color: #7f8c8d;">
                        {original_price:,}원
                    </span>
                    <span style="margin-left: 5px; color: #e74c3c; font-weight: bold;">
                        {discount_rate:.1f}% 할인
                    </span>
                    """
                
                price_html += "</div>"
                st.markdown(price_html, unsafe_allow_html=True)
                
                # 배송비
                if shipping_fee == 0:
                    st.markdown("🚚 **무료배송**")
                else:
                    st.markdown(f"🚚 배송비: {shipping_fee:,}원")
                
                # 평점 및 리뷰
                if rating > 0:
                    stars = "⭐" * int(rating)
                    st.markdown(f"{stars} {rating:.1f} ({review_count:,}개 리뷰)")
            
            # 액션 버튼
            with col3:
                # 총 가격 계산
                total_price = price + shipping_fee
                st.markdown(f"""
                <div style="text-align: center; margin-bottom: 10px;">
                    <div style="font-size: 12px; color: #7f8c8d;">총 결제금액</div>
                    <div style="font-size: 18px; font-weight: bold; color: #2c3e50;">
                        {total_price:,}원
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # 구매 버튼
                if st.button(f"🛒 구매하기", key=f"buy_{index}", use_container_width=True):
                    st.markdown(f'<meta http-equiv="refresh" content="0; url={url}">', 
                              unsafe_allow_html=True)
                
                # 상세보기 버튼
                if st.button(f"📋 상세보기", key=f"detail_{index}", use_container_width=True):
                    self._show_product_details(product)
            
            st.markdown("</div>", unsafe_allow_html=True)
    
    def _show_product_details(self, product: Dict[str, Any]):
        """상품 상세 정보 모달"""
        with st.expander("📋 상품 상세 정보", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**기본 정보**")
                st.write(f"상품명: {product.get('name', 'N/A')}")
                st.write(f"브랜드: {product.get('brand', 'N/A')}")
                st.write(f"쇼핑몰: {product.get('shop', 'N/A')}")
                st.write(f"상품 ID: {product.get('id', 'N/A')}")
            
            with col2:
                st.markdown("**가격 정보**")
                st.write(f"판매가: {product.get('price', 0):,}원")
                st.write(f"정가: {product.get('original_price', 0):,}원")
                st.write(f"할인율: {product.get('discount_rate', 0):.1f}%")
                st.write(f"배송비: {product.get('shipping_fee', 0):,}원")
            
            # 상품 설명
            description = product.get('description', '')
            if description:
                st.markdown("**상품 설명**")
                st.write(description)
```

### 5.5 가격 비교 컴포넌트

#### 가격 비교 (`src/ui/components/price_comparison.py`)
```python
import streamlit as st
import pandas as pd
from typing import List, Dict, Any

class PriceComparison:
    """가격 비교 컴포넌트"""
    
    def render(self, products: List[Dict[str, Any]]):
        """가격 비교 테이블 렌더링"""
        if len(products) < 2:
            return
        
        # 데이터 준비
        comparison_data = []
        for product in products:
            total_price = product.get('price', 0) + product.get('shipping_fee', 0)
            comparison_data.append({
                '쇼핑몰': product.get('shop', 'N/A'),
                '상품가격': f"{product.get('price', 0):,}원",
                '배송비': f"{product.get('shipping_fee', 0):,}원" if product.get('shipping_fee', 0) > 0 else "무료",
                '총 금액': f"{total_price:,}원",
                '할인율': f"{product.get('discount_rate', 0):.1f}%" if product.get('discount_rate', 0) > 0 else "-",
                '평점': f"⭐ {product.get('rating', 0):.1f}" if product.get('rating', 0) > 0 else "-",
                '리뷰수': f"{product.get('review_count', 0):,}개" if product.get('review_count', 0) > 0 else "-"
            })
        
        # DataFrame 생성
        df = pd.DataFrame(comparison_data)
        
        # 최저가 찾기
        min_price_idx = min(range(len(products)), 
                           key=lambda i: products[i].get('price', 0) + products[i].get('shipping_fee', 0))
        
        # 스타일링된 테이블 표시
        st.markdown("#### 💰 가격 비교표")
        
        # 최저가 하이라이트
        def highlight_min_price(row):
            if row.name == min_price_idx:
                return ['background-color: #e8f5e8; font-weight: bold'] * len(row)
            return [''] * len(row)
        
        styled_df = df.style.apply(highlight_min_price, axis=1)
        st.dataframe(styled_df, use_container_width=True, hide_index=True)
        
        # 최저가 정보
        min_price_product = products[min_price_idx]
        min_total = min_price_product.get('price', 0) + min_price_product.get('shipping_fee', 0)
        
        st.success(f"""
        🏆 **최저가**: {min_price_product.get('shop', 'N/A')} - {min_total:,}원
        
        💡 **절약 금액**: 최대 {self._calculate_max_savings(products):,}원까지 절약 가능!
        """)
        
        # 추천 이유
        self._show_recommendation(products, min_price_idx)
    
    def _calculate_max_savings(self, products: List[Dict[str, Any]]) -> int:
        """최대 절약 금액 계산"""
        prices = [p.get('price', 0) + p.get('shipping_fee', 0) for p in products]
        return max(prices) - min(prices)
    
    def _show_recommendation(self, products: List[Dict[str, Any]], min_price_idx: int):
        """추천 이유 표시"""
        min_price_product = products[min_price_idx]
        
        with st.expander("🤔 왜 이 상품을 추천하나요?"):
            reasons = []
            
            # 최저가
            reasons.append("💰 가장 저렴한 가격")
            
            # 무료배송
            if min_price_product.get('shipping_fee', 0) == 0:
                reasons.append("🚚 무료배송")
            
            # 높은 평점
            rating = min_price_product.get('rating', 0)
            if rating >= 4.0:
                reasons.append(f"⭐ 높은 평점 ({rating:.1f}점)")
            
            # 많은 리뷰
            review_count = min_price_product.get('review_count', 0)
            if review_count >= 100:
                reasons.append(f"📝 많은 리뷰 ({review_count:,}개)")
            
            # 할인율
            discount = min_price_product.get('discount_rate', 0)
            if discount > 10:
                reasons.append(f"🔥 높은 할인율 ({discount:.1f}%)")
            
            for reason in reasons:
                st.write(f"• {reason}")
            
            if len(reasons) == 1:
                st.write("• 신뢰할 수 있는 쇼핑몰")
```

### 5.6 API 클라이언트

#### API 클라이언트 (`src/ui/utils/api_client.py`)
```python
import aiohttp
import asyncio
import json
from typing import AsyncGenerator, Dict, Any
import streamlit as st

class APIClient:
    """API 클라이언트"""
    
    def __init__(self):
        self.base_url = "http://localhost:8000/api/v1"
        self.timeout = 30
    
    async def stream_chat(self, message: str, session_id: str) -> AsyncGenerator[Dict[str, Any], None]:
        """채팅 스트리밍"""
        url = f"{self.base_url}/chat"
        payload = {
            "message": message,
            "session_id": session_id
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        async for line in response.content:
                            if line.startswith(b'data: '):
                                try:
                                    data = json.loads(line[6:].decode('utf-8'))
                                    yield data
                                except json.JSONDecodeError:
                                    continue
                    else:
                        yield {
                            "type": "error",
                            "data": {"error": f"HTTP {response.status}"}
                        }
        
        except Exception as e:
            yield {
                "type": "error", 
                "data": {"error": str(e)}
            }
    
    async def upload_image(self, image_file, message: str, session_id: str) -> AsyncGenerator[Dict[str, Any], None]:
        """이미지 업로드 및 검색"""
        url = f"{self.base_url}/chat/image"
        
        try:
            data = aiohttp.FormData()
            data.add_field('message', message)
            data.add_field('session_id', session_id)
            data.add_field('image', image_file, filename=image_file.name)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    if response.status == 200:
                        async for line in response.content:
                            if line.startswith(b'data: '):
                                try:
                                    data = json.loads(line[6:].decode('utf-8'))
                                    yield data
                                except json.JSONDecodeError:
                                    continue
                    else:
                        yield {
                            "type": "error",
                            "data": {"error": f"HTTP {response.status}"}
                        }
        
        except Exception as e:
            yield {
                "type": "error",
                "data": {"error": str(e)}
            }
```

### 5.7 CSS 스타일

#### 메인 CSS (`src/ui/styles/main.css`)
```css
/* 전체 레이아웃 */
.main .block-container {
    padding-top: 2rem;
    padding-bottom: 2rem;
    max-width: 1200px;
}

/* 헤더 스타일 */
.header-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    border-radius: 10px;
    margin-bottom: 2rem;
    text-align: center;
}

.header-content h1 {
    margin: 0;
    font-size: 2.5rem;
    font-weight: bold;
}

.header-content p {
    margin: 0.5rem 0 0 0;
    font-size: 1.2rem;
    opacity: 0.9;
}

/* 채팅 컨테이너 */
.chat-container {
    min-height: 400px;
    max-height: 600px;
    overflow-y: auto;
    padding: 1rem;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    background: #fafafa;
}

/* 입력 컨테이너 */
.input-container {
    position: sticky;
    bottom: 0;
    background: white;
    padding: 1rem;
    border-top: 1px solid #e0e0e0;
    border-radius: 10px 10px 0 0;
    margin-top: 1rem;
}

/* 상품 카드 */
.product-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
}

/* 버튼 스타일 */
.stButton > button {
    border-radius: 20px;
    border: none;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    font-weight: bold;
    transition: all 0.3s ease;
}

.stButton > button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

/* 사이드바 스타일 */
.sidebar-content {
    background: white;
    border-radius: 10px;
    padding: 1rem;
    border: 1px solid #e0e0e0;
}

/* 스피너 커스터마이징 */
.stSpinner > div {
    border-top-color: #667eea !important;
}

/* 메시지 버블 */
.chat-message {
    margin-bottom: 1rem;
}

/* 반응형 디자인 */
@media (max-width: 768px) {
    .header-content h1 {
        font-size: 2rem;
    }
    
    .header-content p {
        font-size: 1rem;
    }
    
    .chat-container {
        max-height: 400px;
    }
}
```

## ✅ 완료 기준
- [ ] Streamlit 메인 앱 구현
- [ ] 전체 화면 채팅 인터페이스 구현
- [ ] 메시지 버블 컴포넌트 구현
- [ ] 상품 카드 표시 기능 구현
- [ ] 가격 비교 테이블 구현
- [ ] 실시간 스트리밍 응답 처리
- [ ] 이미지 업로드 기능 구현 (UI만)
- [ ] CSS 스타일링 완료
- [ ] API 클라이언트 연동
- [ ] 반응형 디자인 적용

## 🧪 테스트 방법

### 1. Streamlit 앱 실행
```bash
# API 서버 실행 (별도 터미널)
python scripts/run_api.py

# Streamlit 앱 실행
streamlit run src/ui/streamlit_app.py
```

### 2. UI 기능 테스트
- 채팅 입력 테스트
- 상품 검색 결과 표시 확인
- 상품 카드 렌더링 확인
- 가격 비교 테이블 확인
- 반응형 디자인 확인 (모바일/데스크톱)

### 3. 스트리밍 응답 테스트
- 실시간 메시지 업데이트 확인
- 상품 정보 실시간 표시 확인
- 에러 처리 확인

## 🔗 다음 단계
[Phase 2 Step 6 - 스트리밍 API 완성](mdc:.cursor/rules/tasks/phase2-step6-streaming-api.mdc)

## 📚 참고 문서
- [개발 태스크 계획](mdc:.cursor/rules/development-task-plan.mdc)
- [UI/UX 설계 가이드](mdc:.cursor/rules/ui_wireframe.mdc)
- [사용자 시나리오](mdc:.cursor/rules/user-scenarios-design.mdc)

