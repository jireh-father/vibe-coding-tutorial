---
description: pr guideline
globs: 
alwaysApply: false
---
# 풀 리퀘스트(PR) 가이드라인

## 📋 PR 작성 원칙

### 1. PR 제목 작성법
- **명확하고 간결한 제목**: 변경 내용을 한 문장으로 요약
- **접두어 활용**: 주요 변경 유형 표시 (예: `[Fix]`, `[Feature]`, `[Refactor]`, `[Test]`, `[Docs]`)
- **이슈 번호 포함**: 관련 이슈가 있을 경우 번호 포함 (예: `[Fix #123] 사용자 인증 버그 수정`)

### 2. PR 설명 구조
```
## 변경 사항
- 주요 변경 내용 1
- 주요 변경 내용 2

## 변경 이유
- 이 변경이 필요한 이유 설명

## 테스트 방법
- 변경 사항을 검증하는 방법 설명
- 특정 테스트 케이스 또는 시나리오 명시

## 스크린샷 (UI 변경 시)
(이미지 첨부)
```

### 3. 커밋 메시지 컨벤션
- **구조화된 형식**: `<type>: <subject>` 형태 사용
- **타입 종류**:
  - `feat`: 새 기능 추가
  - `fix`: 버그 수정
  - `refactor`: 코드 리팩토링
  - `style`: 코드 스타일 변경 (기능 변경 없음)
  - `test`: 테스트 코드 추가/수정
  - `docs`: 문서 변경
  - `chore`: 빌드 프로세스 또는 도구 변경
- **명령형 현재 시제 사용**: "Added" 대신 "Add", "Fixed" 대신 "Fix" 사용
- **본문 추가 시**: 제목과 본문 사이에 빈 줄 추가하고 "왜" 변경했는지 설명

## 🔍 PR 리뷰 가이드라인

### 1. 리뷰어 책임
- **코드 품질 검토**: SOLID 원칙, 클린 코드 기준 준수 여부
- **기능 검증**: 요구사항 충족 여부
- **테스트 코드 확인**: 적절한 테스트 커버리지 확보 여부
- **24시간 이내 응답**: 가능한 빠른 피드백 제공

### 2. 리뷰 코멘트 작성법
- **건설적인 피드백**: 문제점뿐만 아니라 개선 방향 제시
- **구체적인 설명**: 추상적 비판보다 구체적 이슈 지적
- **우선순위 표시**: 필수 수정사항과 제안사항 구분 (예: `[필수]`, `[제안]`)
- **코드 샘플 제공**: 가능한 경우 개선된 코드 예시 제공

### 3. 리뷰 승인 기준
- **모든 필수 수정사항 반영 완료**
- **테스트 통과 확인**
- **코드 품질 기준 충족**
- **최소 1명 이상의 승인**

## 🚀 PR 병합 프로세스

### 1. 병합 전 체크리스트
- [ ] CI/CD 파이프라인 통과
- [ ] 코드 리뷰 승인 완료
- [ ] 충돌 해결 완료
- [ ] 테스트 커버리지 기준 충족 (최소 80%)

### 2. 병합 방식
- **Squash and merge**: 관련 커밋을 하나로 압축하여 히스토리 간결화
- **간결한 커밋 메시지**: PR 제목을 기반으로 최종 커밋 메시지 작성

### 3. 병합 후 작업
- 관련 이슈 종료 처리
- 배포 계획 수립 (필요시)
- 문서 업데이트 (필요시)

## 📊 코드 리뷰 체크포인트

### 1. 기능적 측면
- [ ] 요구사항 충족 여부
- [ ] 예외 처리 적절성
- [ ] 보안 고려사항 검토

### 2. 기술적 측면
- [ ] 코드 중복 최소화
- [ ] 명명 규칙 준수
- [ ] 주석 적절성
- [ ] 성능 영향 검토

### 3. 테스트 측면
- [ ] 단위 테스트 커버리지
- [ ] 테스트 시나리오 완전성
- [ ] 엣지 케이스 테스트 여부

