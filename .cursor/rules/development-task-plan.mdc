---
description: 
globs: 
alwaysApply: false
---
# 최저가 쇼핑 Agent - 개발 태스크 계획

## 📋 개발 계획 개요

## 🎯 프로젝트 목표
- **챗봇형 대화 인터페이스**를 통한 최저가 쇼핑 Agent 구현
- **실시간 스트리밍** 기반 자연스러운 사용자 경험 제공
- **Python + FastAPI + Streamlit + LangGraph + Gemini 2.5 Flash + MCP** 기술 스택 활용

## 🗺️ 전체 개발 로드맵 (10단계)

### Phase 1: 기반 구조 구축 (1-4단계)

#### 1단계: 프로젝트 기본 구조 설정
**목표**: 개발 환경 초기 구성
- Python 프로젝트 초기 설정. venv 생성
- requirements.txt 의존성 관리 생성
- 기본 FastAPI 서버, Streamlit, Agent의 폴더 구조 및 Skeleton 코드 구성 및 작성
- TDD 세팅
- Github 리포지토리 생성 및 연동(mcp 사용), .gitignore
- Skeleton 코드 github에 pr 날리기

#### 2단계: FastAPI 서버 기본 구조 구현
**목표**: API 서버 기반 구축
- FastAPI 서버 메인 앱 구성
- `/chat` 스트리밍 엔드포인트 기본 구조

#### 3단계: LangGraph Agent 기본 워크플로우 구현
**목표**: AI Agent 기본 구조 구축
- React Agent 구현
- 프롬프트 작성(상품 매칭, 가격 정보 정리, 가격 비교, 툴 사용) 
- Gemini 2.5 Flash LLM 연동

#### 4단계: MCP 연동
**목표**: 도구 통합 시스템 구축
- langchain-mcp-adapters로 랭그래프에 mcp 툴 연동
- 인터넷 검색 및 브라우저 사용 mcp 연동
- 기본 도구들(텍스트 처리, 응답 생성) 구현
- **의존성**: 2,3단계

### Phase 2: 사용자 인터페이스 (5-7단계)

#### 5단계: Streamlit 챗봇 UI 구현
**목표**: 사용자 인터페이스 구축
- 전체 화면 채팅 인터페이스
- 메시지 버블 컴포넌트
- 상품 카드 표시
- 실시간 스트리밍 응답 처리
- 이미지 업로드 기능
- **의존성**: 2단계

#### 6단계: 스트리밍 API 완성
**목표**: 실시간 통신 시스템 완성
- Server-Sent Events 구현
- 실시간 검색 진행 상황 전송
- 에러 스트리밍
- 세션 관리
- 이미지 분석 API 연동
- **의존성**: 2,3단계

#### 7단계: 이미지 검색 기능 구현
**목표**: 고급 검색 기능 추가
- 이미지 업로드 처리
- Gemini 2.5 Flash LLM에 image 연동
- 이미지 기반 상품 식별
- 이미지 기반 검색 워크플로우 구현
- **의존성**: 6단계

### Phase 4: 완성 및 최적화 (8단계)

#### 8단계: 테스트 및 최적화
**목표**: 품질 보증 및 성능 개선
- 통합 테스트
- 성능 최적화
- 리팩토링
- 사용자 시나리오 기반 E2E 테스트


## 🔄 개발 프로세스

### 각 단계별 진행 방식
1. **계획 수립**: 상세 구현 계획 작성
2. **개발 실행**: 코드 구현 및 테스트
3. **검증**: 기능 동작 확인
4. **승인**: 다음 단계 진행 승인
5. **문서화**: 구현 내용 문서 업데이트
6. **푸시 & 코드리뷰**: 기능단위 소스코드 푸시 및 코드리뷰