---
description: 
globs: 
alwaysApply: false
---
# PR 모범 사례

## 📋 효과적인 PR 작성 방법

### 1. 작은 단위로 PR 생성하기
- **이상적인 PR 크기**: 300줄 이하의 변경사항
- **단일 목적을 가진 PR**: 하나의 기능 또는 버그 수정에 집중
- **PR 분할 전략**: 큰 변경사항은 여러 개의 작은 PR로 분할

### 2. 명확한 PR 설명 작성하기
- **목적과 배경**: 왜 이 변경이 필요한지 설명
- **기술적 접근 방식**: 어떻게 구현했는지 간략히 설명
- **테스트 방법**: 리뷰어가 변경사항을 검증할 수 있는 방법 제시

### 3. 자체 리뷰 먼저 하기
- **PR 제출 전 자체 검토**: 불필요한 코드, 디버깅 코드 제거
- **PR 설명과 일치 확인**: 실제 변경사항이 PR 설명과 일치하는지 확인
- **테스트 코드 포함**: 기능 변경에 해당하는 테스트 추가 여부 확인

## 🔍 효과적인 코드 리뷰 방법

### 1. 집중적인 리뷰 영역
- **비즈니스 로직**: 핵심 기능이 올바르게 구현되었는지 확인
- **엣지 케이스 처리**: 예외 상황에 대한 처리가 적절한지 확인
- **성능 영향**: 변경사항이 성능에 미치는 영향 검토

### 2. 건설적인 피드백 제공
- **개선 방향 제시**: 단순 지적보다 개선 방법 제안
- **코드 예시 제공**: 가능한 경우 개선된 코드 예시 제공
- **설명적인 코멘트**: 왜 변경이 필요한지 근거 제시

### 3. 균형 있는 피드백
- **긍정적 측면 언급**: 잘 작성된 코드에 대한 칭찬도 포함
- **우선순위 표시**: 필수 수정사항과 제안사항 구분
- **전체적 맥락 고려**: 코드베이스 전체와의 일관성 검토

## 🚀 PR 관리 모범 사례

### 1. 적절한 리뷰어 지정
- **관련 영역 전문가**: 변경된 코드 영역에 익숙한 리뷰어 선택
- **다양한 관점**: 가능한 경우 다양한 역할의 리뷰어 포함
- **지식 공유**: 신규 팀원에게도 리뷰 기회 제공

### 2. 리뷰 피드백 처리
- **명확한 응답**: 각 리뷰 코멘트에 명확히 응답
- **불필요한 변경 최소화**: 원래 PR 범위를 벗어나는 변경 지양
- **변경사항 설명**: 리뷰 기반 변경 시 무엇을 어떻게 변경했는지 설명

### 3. 효율적인 병합 프로세스
- **병합 전 충돌 해결**: 모든 충돌은 병합 전에 해결
- **최종 변경사항 테스트**: 병합 전 최종 변경사항 테스트 확인
- **관련 이슈 종료**: 병합 후 관련 이슈 종료 처리

## 📊 성공적인 PR 체크리스트

### 코드 작성자 체크리스트
- [ ] 코드 스타일 가이드 준수
- [ ] 불필요한 디버깅 코드 제거
- [ ] 적절한 테스트 케이스 추가
- [ ] 명확한 PR 설명 작성
- [ ] 자체 리뷰 완료

### 코드 리뷰어 체크리스트
- [ ] 비즈니스 로직 정확성 확인
- [ ] 코드 스타일 및 일관성 검토
- [ ] 엣지 케이스 및 예외 처리 확인
- [ ] 성능 및 보안 영향 평가
- [ ] 문서화 적절성 검토

